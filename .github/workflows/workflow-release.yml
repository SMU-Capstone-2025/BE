name: CI / CD

on:
  push:
    branches: [deploy]

jobs:
  CI:
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      IMAGE_NAME: doctalk
      IMAGE_TAG: ${{ github.sha }}

    runs-on: ubuntu-latest

    services:
      kafka:
        image: bitnami/kafka:latest
        ports:
          - 9092:9092
        env:
          KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
          KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
        ports:
          - 9200:9200
        env:
          discovery.type: "single-node"
          xpack.security.enabled: "false"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'adopt'

      - name: Google Cloud SDK 설정
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Docker를 위한 gcloud 인증 설정
        run: gcloud auth configure-docker --quiet

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle (Test 제외)
        run: ./gradlew build --exclude-task test

      - name: Verify JAR file
        run: ls -la build/libs/

      - name: Docker 인증 구성
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker build --build-arg SPRING_PROFILE=prod -t us-central1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/docker/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker push us-central1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/docker/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  CD:
    runs-on: ubuntu-latest
    needs: CI

    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      IMAGE_NAME: doctalk
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Google Cloud SDK 설정
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: GCP 프로젝트 설정
        run: gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: GCP 프로젝트 확인
        run: gcloud config list

      - name: GKE 인증 플러그인 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl
          sudo mkdir -p /usr/share/keyrings
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update
          sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin

      - name: GKE 클러스터 인증
        run: gcloud container clusters get-credentials cluster-1 --region us-central1

      - name: Install Helm (Kubernetes 패키지 매니저)
        run: |
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Deploy Redis using Helm
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          helm upgrade --install redis bitnami/redis \
            --set global.storageClass=standard \
            --set persistence.enabled=true \
            --set persistence.size=5Gi
          
      - name: Deploy Elasticsearch using Helm
        run: |
          helm repo add elastic https://helm.elastic.co
          helm repo update
          helm upgrade --install elasticsearch elastic/elasticsearch \
            --set resources.requests.cpu="500m" \
            --set resources.requests.memory="512Mi" \
            --set resources.limits.cpu="1000m" \
            --set resources.limits.memory="1Gi" \
            --set persistence.enabled=true \
            --set persistence.size=5Gi \
            --set replicas=1 \
            --set discovery.type=single-node \
            --set sysctlInitContainer.enabled=false
          
      - name: Deploy Kafka using Helm
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          helm upgrade --install kafka bitnami/kafka \
          --set global.storageClass=standard \
          --set persistence.enabled=true \
          --set persistence.size=10Gi \
          --set zookeeper.enabled=false \
          --set controller.replicaCount=1 \
          --set replicaCount=3
      

      - name: Kubernetes Deployment 적용
        run: |
            kubectl delete -f ./k8s/deployment.yaml
            kubectl apply -f ./k8s/deployment.yaml
            kubectl delete -f ./k8s/loadbalancer.yaml
            kubectl apply -f ./k8s/loadbalancer.yaml

      - name: 기존 Deployment의 이미지 업데이트
        run: kubectl set image deployment/doctalk-deployment doctalk-container=us-central1-docker.pkg.dev/${GCP_PROJECT_ID}/docker/${IMAGE_NAME}:${IMAGE_TAG}