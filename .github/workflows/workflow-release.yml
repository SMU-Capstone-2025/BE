name: CI / CD

on:
  push:
    branches: [feat/#58]

jobs:
  CI:
    runs-on: ubuntu-latest

    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      IMAGE_NAME: doctalk
      IMAGE_TAG: ${{ github.sha }}


    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'adopt'

      - name: Google Cloud SDK 설정
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Docker를 위한 gcloud 인증 설정
        run: gcloud auth configure-docker --quiet

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle(Test 제외)
        run: ./gradlew build --exclude-task test

      - name: Verify JAR file
        run: ls -la build/libs/

      - name: Docker 인증 구성
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker build --build-arg SPRING_PROFILE=prod -t us-central1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/docker/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker push us-central1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/docker/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
  CD:
    runs-on: ubuntu-latest
    needs: CI

    env:
      IMAGE_NAME: doctalk
      IMAGE_TAG: ${{ github.sha }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      IMP_API_KEY: ${{ secrets.IMP_API_KEY }}
      IMP_API_SECRET: ${{ secrets.IMP_API_SECRET }}
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
      NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      REDIS_USERNAME: ${{ secrets.REDIS_USERNAME }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

    steps:
      - name: .env.production 파일 생성
        run: |
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.production
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.production
          echo "IMP_API_KEY=${{ secrets.IMP_API_KEY }}" >> .env.production
          echo "IMP_API_SECRET=${{ secrets.IMP_API_SECRET }}" >> .env.production
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env.production
          echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env.production
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env.production
          echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env.production
          echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env.production
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.production
          echo "REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}" >> .env.production
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env.production
          echo "SPRING_PROFILES_ACTIVE=prod" >> .env.production

      - name: 서버에 .env.production 전송
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: ".env.production"
          target: "~/"

      - name: 서버에 SSH 접속하여 Docker 실행
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            IMAGE_NAME=doctalk
            IMAGE_TAG=${{ github.sha }}
            GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
            
            sudo docker network create --driver bridge app-network
            
            sudo docker stop $IMAGE_NAME || true
            sudo docker rm $IMAGE_NAME || true
            
            sudo docker stop zookeeper
            sudo docker rm zookeeper
            
            sudo docker stop kafka
            sudo docker rm kafka
            
            
            echo "${{ secrets.GCP_SA_KEY }}" | sudo docker login -u _json_key --password-stdin https://us-central1-docker.pkg.dev
            sudo docker pull us-central1-docker.pkg.dev/$GCP_PROJECT_ID/docker/$IMAGE_NAME:$IMAGE_TAG
            
            
            sudo docker run -d \
            --name zookeeper \
            --network app-network \
            -e ALLOW_ANONYMOUS_LOGIN=yes \
            bitnami/zookeeper:latest
            
            
            sudo docker run -d \
            --name kafka \
            --network app-network \
            -e KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181 \
            -e KAFKA_CFG_LISTENERS=PLAINTEXT://:9092 \
            -e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 \
            -e KAFKA_BROKER_ID=1 \
            -e ALLOW_PLAINTEXT_LISTENER=yes \
            bitnami/kafka:3.3.2
            
            sudo docker run -d \
              --name $IMAGE_NAME \
              --network app-network \
              -p 8080:8080 \
              --env-file ~/.env.production \
              us-central1-docker.pkg.dev/$GCP_PROJECT_ID/docker/$IMAGE_NAME:$IMAGE_TAG