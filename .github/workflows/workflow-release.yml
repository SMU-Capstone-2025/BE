name: CI / CD

on:
  push:
    branches: [fix/#121-socket-address-fix]

jobs:
  CI:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: doctalk
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle (Skip Test)
        run: ./gradlew build --exclude-task test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS \
            --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Image to ECR
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/doctalk:${{ env.IMAGE_TAG }}
          docker build --build-arg SPRING_PROFILE=prod -t $IMAGE_URI .
          docker push $IMAGE_URI
  CD:
    runs-on: ubuntu-latest
    needs: CI

    env:
      IMAGE_NAME: doctalk
      IMAGE_TAG: ${{ github.sha }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: .env.production 파일 생성
        run: |
          cat <<EOF > .env.production
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          IMP_API_KEY=${{ secrets.IMP_API_KEY }}
          IMP_API_SECRET=${{ secrets.IMP_API_SECRET }}
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          SPRING_PROFILES_ACTIVE=prod
          EOF

      - name: 서버에 .env.production 전송
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: ".env.production"
          target: "~"

      - name: 서버에 SSH 접속하여 Docker 실행
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            IMAGE_NAME=doctalk
            IMAGE_TAG=${{ github.sha }}
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            AWS_REGION=${{ secrets.AWS_REGION }}

            sudo docker network create --driver bridge app-network || true

            sudo docker stop $IMAGE_NAME || true
            sudo docker rm $IMAGE_NAME || true
            sudo docker stop zookeeper || true
            sudo docker rm zookeeper || true
            sudo docker stop kafka || true
            sudo docker rm kafka || true

            sudo docker login --username AWS \
              --password $(aws ecr get-login-password --region $AWS_REGION) \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            sudo docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG

            sudo docker run -d \
              --name zookeeper \
              --network app-network \
              -e ALLOW_ANONYMOUS_LOGIN=yes \
              bitnami/zookeeper:latest

            sudo docker run -d \
              --name kafka \
              --network app-network \
              -e KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181 \
              -e KAFKA_CFG_LISTENERS=PLAINTEXT://:9092 \
              -e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 \
              -e KAFKA_BROKER_ID=1 \
              -e ALLOW_PLAINTEXT_LISTENER=yes \
              bitnami/kafka:3.3.2

            sudo docker run -d \
              --name $IMAGE_NAME \
              --network app-network \
              -p 8080:8080 \
              --env-file ~/.env.production \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG